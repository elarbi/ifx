/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package fr.irit.ifclipse.metamodel.IFConfig.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import fr.irit.ifclipse.metamodel.IFConfig.util.IFConfigAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class IFConfigItemProviderAdapterFactory extends IFConfigAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this
	 * adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by
	 * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public IFConfigItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.IFConfig} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IFConfigItemProvider ifConfigItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.IFConfig}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createIFConfigAdapter() {
		if (ifConfigItemProvider == null) {
			ifConfigItemProvider = new IFConfigItemProvider(this);
		}

		return ifConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Instance} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected InstanceItemProvider instanceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Instance}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createInstanceAdapter() {
		if (instanceItemProvider == null) {
			instanceItemProvider = new InstanceItemProvider(this);
		}

		return instanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.ObserverInstance} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ObserverInstanceItemProvider observerInstanceItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.ObserverInstance}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createObserverInstanceAdapter() {
		if (observerInstanceItemProvider == null) {
			observerInstanceItemProvider = new ObserverInstanceItemProvider(
					this);
		}

		return observerInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Status} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StatusItemProvider statusItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Status}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStatusAdapter() {
		if (statusItemProvider == null) {
			statusItemProvider = new StatusItemProvider(this);
		}

		return statusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Cut} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CutItemProvider cutItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Cut}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCutAdapter() {
		if (cutItemProvider == null) {
			cutItemProvider = new CutItemProvider(this);
		}

		return cutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.State} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.State}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Transition} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Transition}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.EnabledTransitions} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected EnabledTransitionsItemProvider enabledTransitionsItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.EnabledTransitions}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createEnabledTransitionsAdapter() {
		if (enabledTransitionsItemProvider == null) {
			enabledTransitionsItemProvider = new EnabledTransitionsItemProvider(
					this);
		}

		return enabledTransitionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Action} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Action}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.VariableSet} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected VariableSetItemProvider variableSetItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.VariableSet}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createVariableSetAdapter() {
		if (variableSetItemProvider == null) {
			variableSetItemProvider = new VariableSetItemProvider(this);
		}

		return variableSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.ParameterSet} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ParameterSetItemProvider parameterSetItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.ParameterSet}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createParameterSetAdapter() {
		if (parameterSetItemProvider == null) {
			parameterSetItemProvider = new ParameterSetItemProvider(this);
		}

		return parameterSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Queue} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected QueueItemProvider queueItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Queue}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createQueueAdapter() {
		if (queueItemProvider == null) {
			queueItemProvider = new QueueItemProvider(this);
		}

		return queueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Message} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MessageItemProvider messageItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Message}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMessageAdapter() {
		if (messageItemProvider == null) {
			messageItemProvider = new MessageItemProvider(this);
		}

		return messageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Variable} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Variable}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Parameter} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Parameter}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Type} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Type}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Clock} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ClockItemProvider clockItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Clock}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createClockAdapter() {
		if (clockItemProvider == null) {
			clockItemProvider = new ClockItemProvider(this);
		}

		return clockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.DiscreteClock} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DiscreteClockItemProvider discreteClockItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.DiscreteClock}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDiscreteClockAdapter() {
		if (discreteClockItemProvider == null) {
			discreteClockItemProvider = new DiscreteClockItemProvider(this);
		}

		return discreteClockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.ContinuousClock} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ContinuousClockItemProvider continuousClockItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.ContinuousClock}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createContinuousClockAdapter() {
		if (continuousClockItemProvider == null) {
			continuousClockItemProvider = new ContinuousClockItemProvider(this);
		}

		return continuousClockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Pid} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PidItemProvider pidItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.Pid}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPidAdapter() {
		if (pidItemProvider == null) {
			pidItemProvider = new PidItemProvider(this);
		}

		return pidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.IFInteger} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IFIntegerItemProvider ifIntegerItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.IFInteger}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createIFIntegerAdapter() {
		if (ifIntegerItemProvider == null) {
			ifIntegerItemProvider = new IFIntegerItemProvider(this);
		}

		return ifIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.IFReal} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IFRealItemProvider ifRealItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.IFReal}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createIFRealAdapter() {
		if (ifRealItemProvider == null) {
			ifRealItemProvider = new IFRealItemProvider(this);
		}

		return ifRealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.IFBoolean} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IFBooleanItemProvider ifBooleanItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.IFConfig.IFBoolean}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createIFBooleanAdapter() {
		if (ifBooleanItemProvider == null) {
			ifBooleanItemProvider = new IFBooleanItemProvider(this);
		}

		return ifBooleanItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the
	 * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>)
					|| (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (ifConfigItemProvider != null)
			ifConfigItemProvider.dispose();
		if (instanceItemProvider != null)
			instanceItemProvider.dispose();
		if (observerInstanceItemProvider != null)
			observerInstanceItemProvider.dispose();
		if (statusItemProvider != null)
			statusItemProvider.dispose();
		if (cutItemProvider != null)
			cutItemProvider.dispose();
		if (stateItemProvider != null)
			stateItemProvider.dispose();
		if (transitionItemProvider != null)
			transitionItemProvider.dispose();
		if (enabledTransitionsItemProvider != null)
			enabledTransitionsItemProvider.dispose();
		if (actionItemProvider != null)
			actionItemProvider.dispose();
		if (messageItemProvider != null)
			messageItemProvider.dispose();
		if (variableSetItemProvider != null)
			variableSetItemProvider.dispose();
		if (parameterSetItemProvider != null)
			parameterSetItemProvider.dispose();
		if (queueItemProvider != null)
			queueItemProvider.dispose();
		if (variableItemProvider != null)
			variableItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (typeItemProvider != null)
			typeItemProvider.dispose();
		if (clockItemProvider != null)
			clockItemProvider.dispose();
		if (discreteClockItemProvider != null)
			discreteClockItemProvider.dispose();
		if (continuousClockItemProvider != null)
			continuousClockItemProvider.dispose();
		if (pidItemProvider != null)
			pidItemProvider.dispose();
		if (ifIntegerItemProvider != null)
			ifIntegerItemProvider.dispose();
		if (ifRealItemProvider != null)
			ifRealItemProvider.dispose();
		if (ifBooleanItemProvider != null)
			ifBooleanItemProvider.dispose();
	}

}
