/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package fr.irit.ifclipse.metamodel.UMLConfig.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import fr.irit.ifclipse.metamodel.UMLConfig.util.UMLConfigAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class UMLConfigItemProviderAdapterFactory extends
		UMLConfigAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this
	 * adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by
	 * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public UMLConfigItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.UMLConfig} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected UMLConfigItemProvider umlConfigItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.UMLConfig}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createUMLConfigAdapter() {
		if (umlConfigItemProvider == null) {
			umlConfigItemProvider = new UMLConfigItemProvider(this);
		}

		return umlConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.ActivityGroup} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ActivityGroupItemProvider activityGroupItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.ActivityGroup}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createActivityGroupAdapter() {
		if (activityGroupItemProvider == null) {
			activityGroupItemProvider = new ActivityGroupItemProvider(this);
		}

		return activityGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.InitialThread} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected InitialThreadItemProvider initialThreadItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.InitialThread}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createInitialThreadAdapter() {
		if (initialThreadItemProvider == null) {
			initialThreadItemProvider = new InitialThreadItemProvider(this);
		}

		return initialThreadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.CallStack} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CallStackItemProvider callStackItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.CallStack}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCallStackAdapter() {
		if (callStackItemProvider == null) {
			callStackItemProvider = new CallStackItemProvider(this);
		}

		return callStackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Object} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ObjectItemProvider objectItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Object}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createObjectAdapter() {
		if (objectItemProvider == null) {
			objectItemProvider = new ObjectItemProvider(this);
		}

		return objectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Port} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Port}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Observer} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ObserverItemProvider observerItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Observer}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createObserverAdapter() {
		if (observerItemProvider == null) {
			observerItemProvider = new ObserverItemProvider(this);
		}

		return observerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.EventSet} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected EventSetItemProvider eventSetItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.EventSet}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createEventSetAdapter() {
		if (eventSetItemProvider == null) {
			eventSetItemProvider = new EventSetItemProvider(this);
		}

		return eventSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Event} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Event}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Action} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Action}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.DiscreteTime} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DiscreteTimeItemProvider discreteTimeItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.DiscreteTime}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDiscreteTimeAdapter() {
		if (discreteTimeItemProvider == null) {
			discreteTimeItemProvider = new DiscreteTimeItemProvider(this);
		}

		return discreteTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.DbmTime} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DbmTimeItemProvider dbmTimeItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.DbmTime}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDbmTimeAdapter() {
		if (dbmTimeItemProvider == null) {
			dbmTimeItemProvider = new DbmTimeItemProvider(this);
		}

		return dbmTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Pid} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PidItemProvider pidItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Pid}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPidAdapter() {
		if (pidItemProvider == null) {
			pidItemProvider = new PidItemProvider(this);
		}

		return pidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Queue} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected QueueItemProvider queueItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Queue}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createQueueAdapter() {
		if (queueItemProvider == null) {
			queueItemProvider = new QueueItemProvider(this);
		}

		return queueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Message} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MessageItemProvider messageItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link fr.irit.ifclipse.metamodel.UMLConfig.Message}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMessageAdapter() {
		if (messageItemProvider == null) {
			messageItemProvider = new MessageItemProvider(this);
		}

		return messageItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the
	 * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>)
					|| (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (umlConfigItemProvider != null)
			umlConfigItemProvider.dispose();
		if (activityGroupItemProvider != null)
			activityGroupItemProvider.dispose();
		if (initialThreadItemProvider != null)
			initialThreadItemProvider.dispose();
		if (callStackItemProvider != null)
			callStackItemProvider.dispose();
		if (objectItemProvider != null)
			objectItemProvider.dispose();
		if (portItemProvider != null)
			portItemProvider.dispose();
		if (observerItemProvider != null)
			observerItemProvider.dispose();
		if (eventSetItemProvider != null)
			eventSetItemProvider.dispose();
		if (eventItemProvider != null)
			eventItemProvider.dispose();
		if (actionItemProvider != null)
			actionItemProvider.dispose();
		if (discreteTimeItemProvider != null)
			discreteTimeItemProvider.dispose();
		if (dbmTimeItemProvider != null)
			dbmTimeItemProvider.dispose();
		if (pidItemProvider != null)
			pidItemProvider.dispose();
		if (queueItemProvider != null)
			queueItemProvider.dispose();
		if (messageItemProvider != null)
			messageItemProvider.dispose();
	}

}
